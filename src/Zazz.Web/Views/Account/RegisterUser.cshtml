@using PoliteCaptcha
@model RegisterUserViewModel
@{
    Layout = "~/Views/Shared/_EmptyLayout.cshtml";
    ViewBag.Title = "Register";
}

<div class="container color-white-bg margin-top-15 padding-bottom-100 padding-L-R-20 border-radius-5">
    <div class="row-fluid">
        <div class="span12 border-bottom-2">
            <h4 class="lead-1">
                <i>
                    <img src="/Images/Register.png"></i>
                Register
            </h4>
        </div>
    </div>

    <div class="row-fluid margin-top-10 margin-bottam-20">

        <div class="span6">
            <div class="zazz-form zazz-form2">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
            
                    <fieldset>
                        @if (TempData["alert"] != null && ((bool)TempData["alert"]))
                        {
                            <div class="alert alert-block @TempData["alertClass"]">
                                <button type="button" class="close" data-dismiss="alert">&times;</button>
                                <p>@TempData["alertMessage"]</p>
                            </div>
                        }


                        <div class="control-group">
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.UserName, new { @placeholder = "Username" })
                                @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        @if (!Model.IsOAuth)
                        {
                            <div class="control-group">
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.Email, new { @placeholder = "Email" })
                                    @Html.ValidationMessageFor(model => model.Email, null, new { @class = "help-inline" })
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(m => m.Email)
                        }

                        <div class="control-group">
                            <div class="editor-field">
                                @Html.PasswordFor(model => model.Password, new { @placeholder = "Password" })
                                @Html.ValidationMessageFor(model => model.Password, null, new { @class = "help-inline" })
                            </div>

                        </div>
                        <div class="control-group">
                            <div class="editor-field">
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @placeholder = "Confirm Password" })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        <div class="control-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Gender, new { @class = "control-label" })
                            </div>
                            <div class="editor-field">
                                @Html.RadioButtonForEnum(model => model.Gender)
                                @Html.ValidationMessageFor(model => model.Gender, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        <h6>THE FOLLOWING FIELDS ARE OPTIONAL</h6>
                        <hr style="margin-top: 0;" />
                        <div class="control-group">
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.FullName, new { @placeholder = "Your name" })
                                @Html.ValidationMessageFor(model => model.FullName, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        <div class="control-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.SchoolId, new { @class = "control-label" })
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.SchoolId, new SelectList(Model.Schools, "Id", "Name"), "Select School", new { @class = "selectyze1" })
                                @Html.ValidationMessageFor(model => model.SchoolId, null, new { @class = "help-inline" })
                            </div>
                        </div>
                        <div class="control-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.CityId, new { @class = "control-label" })
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.CityId, new SelectList(Model.Cities, "Id", "Name"), "Select City", new { @class = "selectyze1" })
                                @Html.ValidationMessageFor(model => model.CityId, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        <div class="control-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.MajorId, new { @class = "control-label" })
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.MajorId, new SelectList(Model.Majors, "Id", "Name"), "Select Major", new { @class = "selectyze1" })
                                @Html.ValidationMessageFor(model => model.MajorId, null, new { @class = "help-inline" })
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.SpamPreventionFields()
                        </div>

                        <button type="submit" class="btn btn-primary" style="margin-top: 25px;">Register</button>
                    </fieldset>
            
                }
            </div>
        </div>

        <div class="span6">
            @if (!Model.IsOAuth)
            {
                <div class="social-media-box">
                    <h1>Login with social media</h1>
                    <div class="span12"><a href="@Url.Action("OAuth", "Account", new { id = "facebook" })">
                        <img src="~/Images/F-login.png"></a></div>
                </div>
            }
        </div>

    </div>
</div>

@section Scripts {
    @Scripts.Render("~/js")
    @Html.SpamPreventionScript()
}

