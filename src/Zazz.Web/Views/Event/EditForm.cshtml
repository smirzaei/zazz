@model Zazz.Web.Models.EventViewModel

@{
    Layout = "~/Views/Shared/_UserPageLayout.cshtml";
    ViewBag.Title = ViewBag.FormAction + " Event";
}

<div>
    <div class="page-header">
        <h3>@ViewBag.FormAction Event</h3>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
            
        @Html.HiddenFor(m => m.CreatedDate)
            
        <div class="margin-ten">

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Name, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Name, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Detail, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Detail, new { @class = "span4", @style = "height: 180px;" })
                    @Html.ValidationMessageFor(model => model.Detail, null, new { @class = "help-inline" })
                </div>
            </div>
            
            @Html.HiddenFor(m => m.UtcTime)

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Time, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Time, new { @class = "span4 datepicker" })
                    @Html.ValidationMessageFor(model => model.Time, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Location, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Location, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Location, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Street, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Street, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Street, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.City, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.City, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.City, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Price, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Price, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Price, null, new { @class = "help-inline" })
                </div>
            </div>
            <div class="control-group">
                <div class="editor-label">
                    <label class="control-label">Picture</label>
                </div>
                <input id="photoId" type="hidden"/>
                <div class="btn-group">
                    <button class="btn btn-info">Select Picture</button>
                    <button class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="#">From gallery</a></li>
                        <li><a href="#">Upload picture</a></li>
                    </ul>
                </div>
            </div>

            @Html.HiddenFor(m => m.Latitude)
            @Html.HiddenFor(m => m.Longitude)
                <div id="map-canvas" style="height: 400px;"></div>

        </div>

        
        
        
        <p class="form-actions">
            <input type="submit" value="Submit" class="btn btn-primary" />
        </p>
        
    }
</div>

@section ScriptsTop
{
    <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC-ZWW7fhSaFI1i3i3jjpJUuGPJZI87A6s&sensor=true" type="text/javascript"></script>
}

@section Scripts
{
    <script type="text/javascript">

        $(function() {

            $(document).on('change', '.datepicker', function() {
                var date = new Date($('.datepicker').datetimepicker('getDate'));
                $('input[name="UtcTime"]').val(date.toISOString());
                //console.log('DATE: ' + date);
                //console.log('UTC: ' + date.toUTCString());
                //console.log('ISO: ' + date.toISOString());

            });

            @if (Model != null && Model.Latitude.HasValue && Model.Longitude.HasValue)
            {
                <text>
                    
                    var lat = @Model.Latitude.Value;
                    var lng = @Model.Longitude.Value;

            var latlng = new google.maps.LatLng(lat, lng, false);
            initMap(lat, lng);
            placeMarker(latlng, 14);
                
                </text>

            }
            else
            {
                <text>
                    initMap(45.586365, -73.542480);
                </text>
            }

        });

    </script>
}