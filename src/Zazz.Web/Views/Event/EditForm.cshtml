@model EventDetailsPageViewModel

@{
    Layout = "~/Views/Shared/_UserPageLayout.cshtml";
    ViewBag.Title = ViewBag.FormAction + " Event";
}

<div>
    <div class="page-header">
        <h3>@ViewBag.FormAction Event</h3>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
            
        @Html.HiddenFor(m => m.EventViewModel.CreatedDate)
            
        <div class="margin-ten">
            
            <div class="control-group">
                <div class="editor-label">
                    <label class="control-label">Picture</label>
                </div>
                @if (Model != null && Model.EventViewModel.PhotoId.HasValue)
                {
                    <input name="EventViewModel.PhotoId" id="photoId" type="hidden" value="@Model.EventViewModel.PhotoId.Value"/>
                }
                else
                {
                    <input name="EventViewModel.PhotoId" id="photoId" type="hidden"/>
                }

                <img src="@Model.EventViewModel.ImageUrl.SmallLink" id="selectedImg-thumbnail" class="img-polaroid" style="width: 64px;"/>

                <div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Select Picture</button>
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="#" data-toggle="modal" data-target="#pg-modal">From gallery</a></li>
                        <li><a href="#" data-toggle="modal" data-target="#uploadEventPicModal">Upload picture</a></li>
                    </ul>
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Name, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.Name, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Name, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Description, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.EventViewModel.Description, new { @class = "span4", @style = "height: 180px;" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Description, null, new { @class = "help-inline" })
                </div>
            </div>

            @Html.HiddenFor(m => m.EventViewModel.UtcTime)

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Time, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.Time, new { @class = "span4 datepicker" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Time, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Location, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.Location, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Location, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Street, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.Street, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Street, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.City, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.City, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.City, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.EventViewModel.Price, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.EventViewModel.Price, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.EventViewModel.Price, null, new { @class = "help-inline" })
                </div>
            </div>

        


        <hr />

        @Html.HiddenFor(m => m.EventViewModel.Latitude)
        @Html.HiddenFor(m => m.EventViewModel.Longitude)
        <div id="map-canvas" style="height: 400px;"></div>

    </div>


        <p class="form-actions">
            <button type="submit" class="btn btn-primary">Submit</button>
        </p>
        
    }
</div>





<div class="modal hide fade" id="pg-modal">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Photo Gallery</h3>
        </div>

        <div class="modal-body">
            <strong>Album: </strong>
            <select class="span4" id="pg-albumSelect">
                <option>Loading...</option>
            </select>

            <div id="pg-photos"><i class="icon-spin icon-refresh"></i></div>

        </div>

        <div class="modal-footer">
            <a href="#" data-dismiss="modal" class="btn">Close</a>
        </div>
    </div>

@Html.Partial("_UploadPicModal", new UploadPicModalModel { ModalId = "uploadEventPicModal", CreateFeed = false })



@section ScriptsTop
{
    <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC-ZWW7fhSaFI1i3i3jjpJUuGPJZI87A6s&sensor=true" type="text/javascript"></script>
}

@section Scripts
{
    <script type="text/javascript">

        $(function() {

            $(document).on('change', '.datepicker', function() {
                var date = new Date($('.datepicker').datetimepicker('getDate'));
                $('input[name="UtcTime"]').val(date.toISOString());
                //console.log('DATE: ' + date);
                //console.log('UTC: ' + date.toUTCString());
                //console.log('ISO: ' + date.toISOString());

            });

            @if (Model != null && Model.EventViewModel.Latitude.HasValue && Model.EventViewModel.Longitude.HasValue)
            {
                <text>
                    
            var lat = @Model.EventViewModel.Latitude.Value;
            var lng = @Model.EventViewModel.Longitude.Value;

            var latlng = new google.maps.LatLng(lat, lng, false);
            initMap(lat, lng);
            placeMarker(latlng, 14);
                
                </text>

            }
            else
            {
                <text>
            initMap(45.586365, -73.542480);
            </text>
            }

        });

    </script>
}