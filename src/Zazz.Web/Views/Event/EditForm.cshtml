@model Zazz.Web.Models.EventViewModel

@{
    Layout = "~/Views/Shared/_UserPageLayout.cshtml";
    ViewBag.Title = ViewBag.FormAction + " Event";
}

<div>
    <div class="page-header">
        <h3>@ViewBag.FormAction Event</h3>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
            
        @Html.HiddenFor(m => m.CreatedDate)
            
        <div class="margin-ten">

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Name, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Name, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Detail, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Detail, new { @class = "span4", @style = "height: 180px;" })
                    @Html.ValidationMessageFor(model => model.Detail, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.StartTime, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.StartTime, new { @class = "span4 datepicker" })
                    @Html.ValidationMessageFor(model => model.StartTime, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Location, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Location, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Location, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Street, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Street, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Street, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.City, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.City, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.City, null, new { @class = "help-inline" })
                </div>
            </div>

            <div class="control-group">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Price, new { @class = "control-label" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Price, new { @class = "span4" })
                    @Html.ValidationMessageFor(model => model.Price, null, new { @class = "help-inline" })
                </div>
            </div>
            @Html.HiddenFor(m => m.Latitude)
            @Html.HiddenFor(m => m.Longitude)
                <div id="map-canvas" style="height: 400px;"></div>

        </div>

        
        
        
        <p class="form-actions">
            <input type="submit" value="Submit" class="btn btn-primary" />
        </p>
        
    }
</div>

@section Scripts
{
    <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC-ZWW7fhSaFI1i3i3jjpJUuGPJZI87A6s&sensor=true" type="text/javascript"></script>

    <script type="text/javascript">

        var geocoder;
        var map;
        var marker;
        var infowindow = new google.maps.InfoWindow();
        var latitude;
        var longitude;

        function placeMarker(location) {
            if (marker != null) {
                marker.setMap(null);
            }

            marker = new google.maps.Marker({
                position: location,
                map: map
            });

            //console.log(location.lat());
            //console.log(location.lng());

            $('input[name="Latitude"]').val(location.lat());
            $('input[name="Longitude"]').val(location.lng());

            map.setCenter(location);
        }

        function initMap() {
            geocoder = new google.maps.Geocoder();

            var mapOptions = {
                center: new google.maps.LatLng(45.586365, -73.542480),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(document.getElementById("map-canvas"),
                mapOptions);

            google.maps.event.addListener(map, 'click', function (event) {
                placeMarker(event.latLng);
            });
        }

        function getMarkerPosition() {
            if (marker == undefined) {
                alert("position is not set");
                return null;
            }

            var pos = marker.getPosition();
            var lat = pos.lat();
            var lng = pos.lng();

            return {
                lat: lat,
                lng: lng
            };
        }

        $(function () {

            initMap();

        });

    </script>
}